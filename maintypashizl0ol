
if game:GetService("CoreGui"):FindFirstChild("Menu Premium v1.2") then
    require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New("Un autre menu est injecté. \n Veuillez exécuter à nouveau.")
        for i = 0,5 do
            game:GetService("CoreGui")["Menu Premium v1.2"]:Destroy()
        end
elseif not game:GetService("CoreGui"):FindFirstChild("Menu Premium v1.2") then
    print("Lancement.. Tout semble bien.")
end
--------------------------
require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New("y0, click sur Ok! pour exécuter.")

if game.PlaceId == 6284583030 then
    local start = tick()
    repeat task.wait() until game:isLoaded()
    repeat task.wait() until game:GetService("Players")
    repeat task.wait() until game:GetService("Players").LocalPlayer
    repeat task.wait() until game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    repeat task.wait() until game:GetService("Players").LocalPlayer.PlayerGui.Main.Enabled
    repeat task.wait() until game:GetService("Workspace"):FindFirstChild('__MAP')
end


-- start
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Homsat21/623wgy777qsad/main/M3n0K0l0Rm3n"))()
local venyx = library.new("Menu Premium v1.2", 5013109572)

-- thèmes du menu
local themes = {
Background = Color3.fromRGB(23, 0, 1),
Glow = Color3.fromRGB(255, 95, 95),
Accent = Color3.fromRGB(23, 0, 1),
LightContrast = Color3.fromRGB(44, 13, 19),
DarkContrast = Color3.fromRGB(23, 0, 1),  
TextColor = Color3.fromRGB(255, 105, 138)
}


local GC = getconnections or get_signal_cons
if GC then
    for i,v in pairs(GC(game.Players.LocalPlayer.Idled)) do
        if v["Disable"] then
            v["Disable"](v)
        elseif v["Disconnect"] then
            v["Disconnect"](v)
        end
    end
else
    print("Mal chance.")
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:connect(function()
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    end)
end



-------------------------------------------------------------------------------------------------
--locales

local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local Network = GameLibrary.Network
local Run_Service = game:GetService("RunService")
local rs = Run_Service.RenderStepped
local CurrencyOrder = {"Tech Coins", "Fantasy Coins", "Coins", "Diamonds"}

local IMightKillMyselfCauseOfThis = {
        --Misc
        ['VIP'] = {'VIP'};
        --Spawn
        ['Town'] = {'Town', 'Town FRONT'};
        ['Forest'] = {'Forest', 'Forest FRONT'};
        ['Beach'] = {'Beach', 'Beach FRONT'};
        ['Mine'] = {'Mine', 'Mine FRONT'};
        ['Winter'] = {'Winter', 'Winter FRONT'};
        ['Glacier'] = {'Glacier', 'Glacier Lake'};
        ['Desert'] = {'Desert', 'Desert FRONT'};
        ['Volcano'] = {'Volcano', 'Volcano FRONT'};
        -- Fantasy
        ['Enchanted Forest'] = {'Enchanted Forest', 'Enchanted Forest FRONT'};
        ['Ancient'] = {'Ancient'};
        ['Samurai'] = {'Samurai', 'Samurai FRONT'};
        ['Candy'] = {'Candy'};
        ['Haunted'] = {'Haunted', 'Haunted FRONT'};
        ['Hell'] = {'Hell'};
        ['Heaven'] = {'Heaven'};
        -- Tech
        ['Ice Tech'] = {'Ice Tech'};
        ['Tech City'] = {'Tech City'; 'Tech City FRONT'};
        ['Dark Tech'] = {'Dark Tech'; 'Dark Tech FRONT'};
        ['Steampunk'] = {'Steampunk'; 'Steampunk FRONT'};
        ['Alien Lab'] = {'Alien Lab'; 'Alien Lab FRONT'};
        ['Alien Forest'] = {'Alien Forest'; 'Alien Forest FRONT'};
        ['Glitch'] = {'Glitch'; 'Glitch FRONT'};
        ['Hacker Portal'] = {'Hacker Portal'; 'Hacker Portal FRONT'};
    }

    local AreaListLoc = { --Ça match la 'IMightKillMyselfCauseOfThis' table. Touche po
        'All'; 'VIP';
        'Town'; 'Forest'; 'Beach'; 'Mine'; 'Winter'; 'Glacier'; 'Desert'; 'Volcano';
        'Enchanted Forest'; 'Ancient'; 'Samurai'; 'Candy'; 'Haunted'; 'Hell'; 'Heaven';
        'Ice Tech'; 'Tech City'; 'Dark Tech'; 'Steampunk'; 'Alien Lab'; 'Alien Forest';
    }
    
    
    
    local Chests = {
        'All';
        -- Spawn
        "Magma Chest",
        -- Fantasy
        "Enchanted Chest", "Hell Chest", "Haunted Chest", "Angel Chest", "Grand Heaven Chest",
        -- Tech
        "Giant Tech Chest"; "Giant Steampunk Chest"; "Giant Alien Chest";
    }
    
    

local function SecondsToClock(seconds) 
        local days = math.floor(seconds / 86400)
        seconds = seconds - days * 86400
        local hours = math.floor(seconds / 3600 )
        seconds = seconds - hours * 3600
        local minutes = math.floor(seconds / 60) 
        seconds = seconds - minutes * 60

        return string.format("%d d, %d h, %d m, %d s.",days,hours,minutes,seconds)
      end



--5012544693

-------------------------------------------------------------------------------------------------
-- section farm / trucs automatisée


local page = venyx:addPage("Auto-Farm", 1379498635)
local section1 = page:addSection("Auto-Farm.")
local section2 = page:addSection("Truc Automatisée")
-------------------------------------------------------------------------------------------------
-- section divers
local page = venyx:addPage("Divers", 37219625)
local misc1 = page:addSection("Divers.")
local misc2 = page:addSection("Ouvrir des Menus.")

-------------------------------------------------------------------------------------------------

-- section oeufs
local page = venyx:addPage("Oeufs", 5094819983)
local eggs1 = page:addSection("Ouvre-oeufs automatisée")
-------------------------------------------------------------------------------------------------

-- section pets
local page = venyx:addPage("Animaux", 329532393)
--local pets3 = page:addSection("Automated enchant | Temporarily disabled.")
local pets4 = page:addSection("Dark Matter")

-------------------------------------------------------------------------------------------------

-- Troll page
--local page = venyx:addPage("Troll", 329532393)
--local troll1 = page:addSection("Troll")

-------------------------------------------------------------------------------------------------
-- section paramètres
local page = venyx:addPage("Paramètres", 5107159171)
local Settings1 = page:addSection("Paramètres.")
local Settings2 = page:addSection("Thèmes.")
Settings1:addKeybind("Raccourci Clavier", Enum.KeyCode.Z, function(menu)
venyx:toggle()
end, function(menu)
end)

------------




------------

Settings1:addButton("Détruire le menu", function(destroygui)
    game:GetService("CoreGui")["Menu Premium v1.2"]:Destroy()
    print("Menu Détruit avec succès.")
end)
-------------------------------------------------------------------------------------------------

local MethodList = {'Normal', 'Chests', 'Multiple Target', 'Valeur la plus basse (Multi)', 'Valeur la plus élevée', '[EN TEST] Valeur la plus élevée', 'Plus proche'}

section1:addDropdown("Méthodes", MethodList, function(methodfunc)
    if methodfunc then
        _G.methodfunc = methodfunc
    end
    print("Méthode Sélectionner: ", methodfunc)
end)

--------------------------------


local ItemToFarmList = {'All', 'Magma Chest', 'Enchanted Chest', 'Hell Chest', 'Haunted Chest', 'Angel Chest', 'Grand Heaven Chest', 'Giant Tech Chest', 'Giant Steampunk Chest'}

section1:addDropdown("Choses à cultiver", ItemToFarmList, function(itemtofarmfunc)
    if itemtofarmfunc then
        _G.itemtofarmfunc = itemtofarmfunc
    end
    print("Item Sélectionner: ", itemtofarmfunc)
end)

--------------------------------

--local WorldList = {"Spawn", "Fantasy", "Tech"}

--section1:addDropdown("Select World", WorldList, function(worldfunc)
--    if worldfunc then
--        _G.worldfunc = worldfunc
--    end
--    print("World: ", worldfunc)
--end)
--------------------------------


--local Coins = {} 
--for i,v in pairs(game.ReplicatedStorage.Game.Coins:GetChildren()) do 
--    for i2,v2 in pairs(v:GetChildren()) do 
--        table.insert(Coins, v2.Name)
--    end 
--end 
--table.foreach(Coins, print)



section1:addDropdown("Sélectionnez l'emplacement", AreaListLoc, function(mapafunc)
    if mapafunc then
        _G.mapafunc = mapafunc
    end
    print("L'Emplacement choisis: ", mapafunc)
end)

-------------------------------------------------------------------------------------------------

local AreaWorldTable = {}
for _, v in pairs(game:GetService("ReplicatedStorage").Game.Coins:GetChildren()) do
    for _, b in pairs(v:GetChildren()) do
        table.insert(AreaWorldTable, b.Name)
    end
    table.insert(AreaWorldTable, v.Name)
end

-------------------------

function AllChests()
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        local shit = v
        shit["index"] = i
        for aa,bb in pairs(AreaWorldTable) do
            if string.find(v.n, bb) then
                local thing = string.gsub(v.n, bb.." ", "")
                if table.find(Chests, thing) then
                    shit.n = thing
                    table.insert(returntable, shit)
                end
            end
        end
    end
    return returntable
end

-------------------------------

workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "buy egg")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "join coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "farm coin")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "claim orbs")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "change pet target")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "get trade")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "add trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "remove trade pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "convert to dark matter")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem dark matter pet")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "collect lootbag")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem rank rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "redeem vip rewards")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "toggle setting")
workspace.__THINGS.__REMOTES.MAIN:FireServer("a", "activate boost")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use golden machine")
workspace.__THINGS.__REMOTES.MAIN:FireServer("b", "use rainbow machine")

-------------------------------

function FarmCoin(CoinID, PetID)
    game.workspace['__THINGS']['__REMOTES']["join coin"]:InvokeServer({[1] = CoinID, [2] = {[1] = PetID}})
    game.workspace['__THINGS']['__REMOTES']["farm coin"]:FireServer({[1] = CoinID, [2] = PetID})
end

-------------------------------

--function GetMyPets()
--   local returntable = {}
--   for i,v in pairs(GameLibrary.Save.Get().Pets) do
--       if v.e then 
--           table.insert(returntable, v.uid)
--       end
--   end
--   return returntable
--end

local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
local IDToName = {}
local NameToID = {}
for i,v in pairs(Library.Directory.Pets ) do
    IDToName[i] = v.name
    NameToID[v.name] = i
end

function GetMyPets()
       local returntable = {}
       for i,v in pairs(GameLibrary.Save.Get().Pets) do
           if v.e then 
               table.insert(returntable, v.uid)
           end
       end
       return returntable
    end

function GetPets()
        local MyPets = {}
        for i,v in pairs(GameLibrary.Save.Get().Pets) do
            --if (not _G.AllowMythicals) or (_G.AllowMythicals and (PettoRarity[v.id] ~= 'Mythical' and PettoRarity[v.id] ~= 'Exclusive' and not string.find(IDToName[v.id]:lower(), "maskot"))) then
                local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
                local TempString = ThingyThingyTempTypeThing .. IDToName[v.id]
                if MyPets[TempString] then
                    table.insert(MyPets[TempString], v.uid)
                else
                    MyPets[TempString] = {}
                    table.insert(MyPets[TempString], v.uid)
                end
            --end
        end
        return MyPets
    end

--function GetPets()
--        local MyPets = {}
--        for i,v in pairs(GameLibrary.Save.Get().Pets) do
--            --if (not _G.AllowMythicals) or (_G.AllowMythicals and (not PettoRarity[v.id] ~= 'Mythical' and PettoRarity[v.id] ~= 'Exclusive')) then
--                local ThingyThingyTempTypeThing = (v.g and 'Gold') or (v.r and 'Rainbow') or (v.dm and 'Dark Matter') or 'Normal'
--                local TempString = ThingyThingyTempTypeThing .. IDToName[v.id]
--                if MyPets[TempString] then
--                    table.insert(MyPets[TempString], v.uid)
--                else
--                    MyPets[TempString] = {}
--                    table.insert(MyPets[TempString], v.uid)
--                end
--            end
--        --end
--        return MyPets
--    end

--------------------------

--function GetCoins(area)
--    local returntable = {}
--    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
--    for i,v in pairs(ListCoins) do
--        if _G.mapafunc == 'All' or table.find(IMightKillMyselfCauseOfThis[_G.mapafunc], v.a) then
--            local shit = v
--            shit["index"] = i
--            table.insert(returntable, shit)
--         end
--    end
--    return returntable
--end

function GetCoins(area, exclude)
    exclude = exclude or {}
    local Areas = (IMightKillMyselfCauseOfThis)
    local returntable = {}
    local ListCoins = game.workspace['__THINGS']['__REMOTES']["get coins"]:InvokeServer({})[1]
    for i,v in pairs(ListCoins) do
        if _G.mapafunc == 'All' or table.find(Areas[_G.mapafunc], v.a) and not table.find(exclude ,v.n) then
            local shit = v
            shit["index"] = i
            table.insert(returntable, shit)
         end
    end
    return returntable
end
--------------------------

--function GetCoinTable(area)
--    local CoinTable = GetCoins(area)
--    function getKeysSortedByValue(tbl, sortFunction)
--        local keys = {}
--        for key in pairs(tbl) do
--            table.insert(keys, key)
--        end
--        table.sort(
--            keys,
--            function(a, b)
--                return sortFunction(tbl[a].h, tbl[b].h)
--            end
--        )
--        return keys
--    end
--    local sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a > b end)
--    local newCoinTable = {}
--
--    for i,v in pairs(sortedKeys) do
--        table.insert(newCoinTable, CoinTable[v])
--    end
--    
--    return newCoinTable
--end

function GetCoinTable(area, Type, exclude)
    exclude = exclude or {}
    local CoinTable = GetCoins(area, exclude)
    local function getKeysSortedByValue(tbl, sortFunction)
        local keys = {}
        for key in pairs(tbl) do
            table.insert(keys, key)
        end
        table.sort(
            keys,
            function(a, b)
                return sortFunction(tbl[a].h, tbl[b].h)
            end
        )
        return keys
    end
    local sortedKeys
    if Type == 'Highest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a > b end)
    elseif Type == 'Lowest' then
        sortedKeys = getKeysSortedByValue(CoinTable, function(a, b) return a < b end)
    end
    local newCoinTable = {}

    for i,v in pairs(sortedKeys) do
        table.insert(newCoinTable, CoinTable[v])
    end

    return newCoinTable
end

-------------------------

if _G.MyConnection then _G.MyConnection:Disconnect() end
    _G.MyConnection = game.Workspace.__THINGS.Orbs.ChildAdded:Connect(function(Orb)
        game.Workspace.__THINGS.__REMOTES["claim orbs"]:FireServer({{Orb.Name}})
    end)

section1:addToggle("Activer le farm automatisée", false, function(farmingtogglefunc)
if farmingtogglefunc == true then
    _G.FarmingToggle = true
elseif farmingtogglefunc == false or destroygui then
    _G.FarmingToggle = false
end
    
        local CurrentFarmingPets = {} -- skidder de https://v3rmillion.net/showthread.php?tid=1137512 pcq j'avais la flemme xd
        while _G.FarmingToggle do
            local pethingy = GetMyPets()
            local cointhiny = nil

        --local CurrentFarmingPets = {}
        --while rs:wait() and _G.FarmingToggle == false do
        --    local pethingy = GetPets()

        --if _G.methodfunc == 'Normal' then
        --    local cointhiny = GetCoins(_G.mapafunc)
        --    for i = 1, #cointhiny do
        --        if _G.FarmingToggle and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
        --            for _, bb in pairs(pethingy) do
        --                if _G.FarmingToggle and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
        --                    spawn(function()
        --                        FarmCoin(cointhiny[i].index, bb)
        --                    end)
        --                end
        --            end
        --            repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index)
        --        end
        --    end

            if _G.methodfunc == 'Normal' then
                local cointhiny = GetCoins(_G.mapafunc)
                for i = 1, #cointhiny do
                    if _G.FarmingToggle and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) then
                        for _, bb in pairs(pethingy) do
                            coroutine.wrap(function()
                                FarmCoin(cointhiny[i].index, bb)
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or not _G.FarmingToggle or _G.methodfunc ~= 'Normal'
                    end
                end

        --    elseif _G.methodfunc == 'Chest' then
        --        for i,v in pairs(AllChests()) do
        --            if (v.n == _G.itemtofarmfunc) or (_G.itemtofarmfunc == 'All') then
        --                local starttick = tick()
        --                for a, b in pairs(pethingy) do
        --                    pcall(function() FarmCoin(v.index, b) end)
        --                end
        --                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(v.index) or #game:GetService("Workspace")["__THINGS"].Coins[v.index].Pets:GetChildren() == 0
        --                --warn(v.n .. " has been broken in", tick()-starttick)
        --            end
        --        end

            elseif _G.methodfunc == 'Chests' then
                for i,v in pairs(AllChests()) do
                    if (v.n == _G.itemtofarmfunc) or (_G.itemtofarmfunc == 'All') then
                        local starttick = tick()
                        for a, b in pairs(pethingy) do
                            coroutine.wrap(function()
                                FarmCoin(v.index, b)
                            end)()
                        end
                        repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(v.index) or #game:GetService("Workspace")["__THINGS"].Coins[v.index].Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Chest'
                        --warn(v.n .. " has been broken in", tick()-starttick)
                    end
                end

            --elseif _G.methodfunc == 'Multi Target' then
        --    local cointhiny = GetCoins(_G.mapafunc)
        --    for i = 1, #cointhiny do
        --        if i%#pethingy == #pethingy-1 then wait() end
        --        if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
        --            spawn(function()
        --                CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
        --                FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
        --                repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0
        --                CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
        --            end)
        --        end
        --    end

            elseif _G.methodfunc == 'Multiple Target' then
                local cointhiny = GetCoins(_G.mapafunc)
                for i = 1, #cointhiny do
                    if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                        coroutine.wrap(function()
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                            FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                            repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Multi Target'
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                        end)()
                    end
                end

            elseif _G.methodfunc == 'Valeur la plus basse (Multi)' then
                local cointhiny = GetCoinTable(_G.mapafunc, "Lowest")
                for i = 1, (#cointhiny >= #pethingy and #pethingy or #cointhiny) do
                    if not CurrentFarmingPets[pethingy[i%#pethingy+1]] or CurrentFarmingPets[pethingy[i%#pethingy+1]] == nil then
                        coroutine.wrap(function()
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = 'Farming'
                            FarmCoin(cointhiny[i].index, pethingy[i%#pethingy+1])
                            repeat task.wait(0.0001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index) or #game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[i].index).Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Lowest Value (Multi)'
                            CurrentFarmingPets[pethingy[i%#pethingy+1]] = nil
                        end)()
                    end
                end

            --elseif _G.methodfunc == 'Highest Value' then
        --    local cointhiny = GetCoinTable(_G.mapafunc)
        --    for a,b in pairs(pethingy) do
        --        spawn(function() FarmCoin(cointhiny[1].index, b) end)
        --    end
        --    repeat rs:wait() until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[1].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[1].index].Pets:GetChildren() == 0

            elseif _G.methodfunc == 'Valeur la plus élevée' then
                local cointhiny = GetCoinTable(_G.mapafunc, "Highest")
                if #cointhiny >= 1 then
                    for a,b in pairs(pethingy) do
                        coroutine.wrap(function()
                            FarmCoin(cointhiny[1].index, b) 
                        end)()
                    end
                    repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[1].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[1].index].Pets:GetChildren() == 0 or not _G.FarmingToggle or _G.methodfunc ~= 'Highest Value'
                else
                    task.wait()
                end

            elseif _G.methodfunc == '[EN TEST] Valeur la plus élevée' then
                local cointhiny = GetCoinTable(_G.mapafunc, "Highest")
                if #cointhiny >= 3 then
                    local CurrentFarmingPets = {}
                    for a = 1, 3 do
                        coroutine.wrap(function()
                            if CurrentFarmingPets[a] == nil then
                                for petnum = a, #pethingy, 3 do
                                    coroutine.wrap(function()
                                        if not CurrentFarmingPets[a] then CurrentFarmingPets[a] = {} end
                                        if CurrentFarmingPets[a] ~= nil and game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) and not table.find(CurrentFarmingPets[a], pethingy[petnum]) then
                                            table.insert(CurrentFarmingPets[a], pethingy[petnum])
                                            FarmCoin(cointhiny[a].index, pethingy[petnum]) 
                                        end
                                    end)()
                                end
                                repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(cointhiny[a].index) or #game:GetService("Workspace")["__THINGS"].Coins[cointhiny[a].index].Pets:GetChildren() == 0  or not _G.FarmingToggle or _G.methodfunc ~= '[TESTING] Highest Value'
                                CurrentFarmingPets[a] = nil
                            end
                        end)()
                    end
                else
                    task.wait()
                end
            
            --elseif _G.methodfunc == 'Nearest' then
        --    local NearestOne = nil
        --    local NearestDistance = math.huge
        --    for i,v in pairs(game:GetService("Workspace")["__THINGS"].Coins:GetChildren()) do
        --        if (v.POS.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < NearestDistance then
        --            NearestOne = v
        --            NearestDistance = (v.POS.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        --        end
        --    end
        --    for a,b in pairs(pethingy) do
        --        spawn(function() FarmCoin(NearestOne.Name, b) end)
        --    end
            
            elseif _G.methodfunc == 'Plus proche' then
                local cointable = game:GetService("Workspace")["__THINGS"].Coins:GetChildren()
                table.sort(cointable, function(i, v)
                    return (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - i.POS.Position).magnitude < (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.POS.Position).magnitude
                end)
                local NearestOne = cointable[1]
                if NearestOne ~= nil then
                    for a,b in pairs(pethingy) do
                        coroutine.wrap(function()
                            if NearestOne ~= nil then
                                FarmCoin(NearestOne.Name, b)
                            end
                        end)()
                    end
                    repeat task.wait(0.001) until not game:GetService("Workspace")["__THINGS"].Coins:FindFirstChild(NearestOne.Name) or #game:GetService("Workspace")["__THINGS"].Coins[NearestOne.Name].Pets:GetChildren() == 0
                else
                    task.wait()
                end
            end
        end
    end)


-------------------------------------------------------------------------------------------------
-- Farming Addons
--
--section1:addToggle("Auto Collect Orbs", false, function(autocollecting)
--
--if autocollecting == true then
--    _G.CollectOrbs = true
--elseif autocollecting == false or destroygui then
--    _G.CollectOrbs = false
--    end
--
--function CollectOrbs()
--   local ohTable1 = {[1] = {}}
--   for i,v in pairs(game.workspace['__THINGS'].Orbs:GetChildren()) do
--       ohTable1[1][i] = v.Name
--        end
--   game.workspace['__THINGS']['__REMOTES']["claim orbs"]:FireServer(ohTable1)
--    end
--
--while wait() and _G.CollectOrbs do
--      pcall(function() CollectOrbs() end)
--end
--end)

---------------

------------------
-- Misc



--misc1:addButton("Better Search", function(bettersearchmessage)
 --   require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New("Better Search Loaded \nNow you can use type: \n- Pet Name \n- Pet Nickname \n- Pet Rarity (Exclusive, Mythical, Legendary, Epic, Rare, Basic) \n- Pet Type (Dark Natter, Rainbow, Gold and Normal \n- Enchants like Royalty etc")
 ---   print("Pet Counter Loaded")
 --   loadstring(game:HttpGet('https://pastebinp.com/raw/JUEtgq95'))()
--end)

------------------

--misc1:addButton("Pet Counter", function(petcountermessage)
   -- print("Pet Counter Loaded")
   -- loadstring(game:HttpGet("https://raw.githubusercontent.com/owedits/fartsfx/main/pcounfart.lua", true))()
  --  if petcountermessage then
  --      venyx:Notify("Pet Counter Started", "Click F9 to check counted pets")
  --  end
--end)

-------------------------------------------------------------------------------------------------
--page2

local pathToScript = game.Players.LocalPlayer.PlayerScripts.Scripts.Game['Open Eggs']
local oldFunc = getsenv(pathToScript).OpenEgg
----
local Eggs = {} 
for i,v in pairs(game.ReplicatedStorage.Game.Eggs:GetChildren()) do 
    for i2,v2 in pairs(v:GetChildren()) do 
        table.insert(Eggs, v2.Name)
    end 
end

eggs1:addDropdown("Sélectionnez l'oeuf", Eggs, function(eggor)
    if eggor then
        _G.Egg = eggor
    end
    --print("Text: ", eggor)
    --print("_G.Egg: ", _G.Egg)
end)

----
eggs1:addToggle("Supprimer l'animation d'ouverture des oeufs", false, function(delanimation)
    if delanimation == true then 
        getsenv(pathToScript).OpenEgg = function() return end 
    else
        getsenv(pathToScript).OpenEgg = oldFunc
    end 
end)

-------------------------------------------------------------------------------------------------

eggs1:addToggle("Ouvrir 3x Oeufs [Gamepass Nécessaire]", false, function(triplegamepass)

if triplegamepass == true then
    _G.TripleEgg = true
elseif triplegamepass == false or destroygui then
    _G.TripleEgg = false
    print("Vous n'avez pas le Gamepass.")
    end
end)

_G.TripleEgg = false

-------------------------------------------------------------------------------------------------


----------------------------

eggs1:addToggle("Activer l'ouvre-oeufs automatisé.", false, function(dropegg)
shared.toggle3drop = dropegg
end)
local openeegg = eggor
game:GetService("RunService").RenderStepped:connect(function()
if shared.toggle3drop then
    --print("Egg: ", _G.Egg)
    --print("Triple Egg GamePasse: ", _G.TripleEgg)
    local ohTable1 = {
    	[1] = _G.Egg,
    	[2] = _G.TripleEgg
    }
    workspace.__THINGS.__REMOTES["buy egg"]:InvokeServer(ohTable1)
    wait(0.5)
    end
end)


-------------------------------------------------------------------------------------------------
--Pets


local GameLibrary = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local IDToName = {}
local NameToID = {}
local PettoRarity = {}
local RarityTable = {}
local PetNamesTable = {}
local PetNamesTable = {}

for i,v in pairs(GameLibrary.Directory.Pets) do
    IDToName[i] = v.name
    NameToID[v.name] = i
    PettoRarity[i] = v.rarity
    if not table.find(RarityTable, v.rarity) then
        table.insert(RarityTable, v.rarity)
    end
    table.insert(PetNamesTable, v.name)
end

-------------------------------------------------------------------------------------------------
--Dark Matter

pets4:addButton("Vérification du temps restant", function()
        local PetList = {}
        for i,v in pairs(GameLibrary.Directory.Pets) do
        PetList[i] = v.name
        end

        local returnstring = ""
        for i,v in pairs(GameLibrary.Save.Get().DarkMatterQueue) do
            local timeleft = 'Prêt.'
            if math.floor(v.readyTime - os.time()) > 0 then
                timeleft = SecondsToClock(math.floor(v.readyTime - os.time()))
            end
            local stringthing = PetList[v.petId] .." va être prêt dans: ".. timeleft
            returnstring = returnstring .. stringthing .. "\n"
        end
        require(game:GetService("ReplicatedStorage").Framework.Modules.Client["5 | Message"]).New(returnstring)
end)

-------------------------------
pets4:addToggle("Activer l'auto-claim automatisé des Dark Matter", false, function(autoclaimdark)

if autoclaimdark == true then
    _G.AutoClaimDarkMatter = true
elseif autoclaimdark == false then
    _G.AutoClaimDarkMatter = false
end
    
spawn(function()
    while task.wait() and _G.AutoClaimDarkMatter do
        for i,v in pairs(GameLibrary.Save.Get().DarkMatterQueue) do
            if math.floor(v.readyTime - os.time()) < 0 then
                workspace.__THINGS.__REMOTES["redeem dark matter pet"]:InvokeServer({[1] = i})
            end
            end
        task.wait(15)
    end
end)
end)


-------------------------------------------------------------------------------------------------
--page3


section2:addToggle("Récupérez automatiquement les récompenses.", false, function(autorewards)

if autorewards == true then
    _G.AutoRewards1 = true
elseif autorewards == false then
    _G.AutoRewards1 = false
end

while task.wait() and _G.AutoRewards1 do
	workspace.__THINGS.__REMOTES["redeem vip rewards"]:InvokeServer({})
	workspace.__THINGS.__REMOTES["redeem rank rewards"]:InvokeServer({})			
end

		
--shared.toggle3rewards = rewards
--game:GetService("RunService").RenderStepped:connect(function()
--if shared.toggle3rewards then
--    workspace.__THINGS.__REMOTES["redeem vip rewards"]:InvokeServer({})
--    workspace.__THINGS.__REMOTES["redeem rank rewards"]:InvokeServer({})
--end


--if shared.toggle3rewards == true then
    --if game:GetService("Workspace")["__MAP"].Interactive["Rank Rewards"].Pad.BillboardGui.Timer.Text == "Redeem!" and game:GetService("Workspace")["__MAP"].Interactive["Rank Rewards"].Pad.BillboardGui.Timer.Text == "Redeem!"  then
    --local Library = require(game:GetService("ReplicatedStorage").Framework.Library)
    --Library.Network.Invoke("redeem rank rewards", {})
    --end
    --end
end)

section2:addButton("Suivi des statistiques", function()
    local gamelibrary = require(game:GetService("ReplicatedStorage").Framework.Library)
local Save = gamelibrary.Save.Get
local Commas = gamelibrary.Functions.Commas
local types = {}
local menus = game:GetService("Players").LocalPlayer.PlayerGui.Main.Right
for i, v in pairs(menus:GetChildren()) do
    if v.ClassName == 'Frame' and v.Name ~= 'Rank' and not string.find(v.Name, "2") then
        table.insert(types, v.Name)
    end
end

function get(thistype)
    return Save()[thistype]
end

menus.Diamonds.LayoutOrder = 99988
menus['Tech Coins'].LayoutOrder = 99992
menus['Fantasy Coins'].LayoutOrder = 99994
menus.Coins.LayoutOrder = 99996
menus.UIListLayout.HorizontalAlignment = 2

_G.MyTypes = {}
for i,v in pairs(types) do
    if menus:FindFirstChild(v.."2") then
        menus:FindFirstChild(v.."2"):Destroy()
    end
end
for i,v in pairs(types) do
    if not menus:FindFirstChild(v.."2") then
        local tempmaker = menus:FindFirstChild(v):Clone()
        tempmaker.Name = tostring(tempmaker.Name .. "2")
        tempmaker.Parent = menus
        tempmaker.Size = UDim2.new(0, 175, 0, 30)
        tempmaker.LayoutOrder = tempmaker.LayoutOrder + 1
        _G.MyTypes[v] = tempmaker
    end
end
menus.Diamonds2.Add.Visible = false

-- Skidded from byte-chan:tm:
for i,v in pairs(types) do
    spawn(function()
        local megatable = {}
        local imaginaryi = 1
        local ptime = 0
        local last = tick()
        local now = last
        local TICK_TIME = 0.5
        while true do
            if ptime >= TICK_TIME then
                while ptime >= TICK_TIME do ptime = ptime - TICK_TIME end
                local currentbal = get(v)
                megatable[imaginaryi] = currentbal
                local diffy = currentbal - (megatable[imaginaryi-120] or megatable[1])
                imaginaryi = imaginaryi + 1
                _G.MyTypes[v].Amount.Text = tostring(Commas(diffy).." in 60s")
                _G.MyTypes[v]["Amount_odometerGUIFX"].Text = tostring(Commas(diffy).." in 60s")
            end
            task.wait(0.001)
            now = tick()
            ptime = ptime + (now - last)
            last = now
        end
    end)
end
    print("Suivi des statistiques activé.")
end)

section2:addButton("Réclamez automatiquement les lootbags", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/Homsat21/623wgy777qsad/main/L0otB4glm4o'))()
    print("Lootbag automatique activé.")
end)
-------------------------------------------------------------------------------------------------


misc1:addButton("Réducteur de lag [Bon pour AFK.]", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/Homsat21/623wgy777qsad/main/yuWantFPSBrah%3F'))()
    print("Réducteur de lag activé.")
end)

-------------------------------------------------------------------------------------------------
--Remote Things
misc2:addButton("Pet Collection", function()
    game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Collection.Enabled
end)

	misc2:addButton("Fuse Pets", function()
		game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.FusePets.Enabled
	end)

	misc2:addButton("Gold Machine", function()
		game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Golden.Enabled
	end)

	misc2:addButton("Rainbow Machine", function()
		game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Rainbow.Enabled
	end)

	misc2:addButton("Dark Matter Machine", function()
		game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.DarkMatter.Enabled
	end)

	misc2:addButton("Merchant", function()
		game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Merchant.Enabled
	end)

	misc2:addButton("Enchantements", function()
		game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.EnchantPets.Enabled
	end)

    misc2:addButton("Upgrades", function()
		game:GetService("Players").LocalPlayer.PlayerGui.Upgrades.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Upgrades.Enabled
	end)

    misc2:addButton("Bank", function()
		game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Bank.Enabled
	end)

-------------------------------------------------------------------------------------------------
for theme, color in pairs(themes) do -- changeur de thème tout en un. Je sais, je suis k0ol ;)
Settings2:addColorPicker(theme, color, function(color3)
venyx:setTheme(theme, color3)
end)
end
-------------------------------------------------------------------------------------------------

-- load
venyx:SelectPage(venyx.pages[1], true)

-------------------------------------------------------------------------------------------------
--[[
                                                          bbbbbbbb                                                                                                      
TTTTTTTTTTTTTTTTTTTTTTT                                   b::::::b                                                                                                      
T:::::::::::::::::::::T                                   b::::::b                                                                                                      
T:::::::::::::::::::::T                                   b::::::b                                                                                                      
T:::::TT:::::::TT:::::T                                    b:::::b                                                                                                      
TTTTTT  T:::::T  TTTTTTeeeeeeeeeeee        eeeeeeeeeeee    b:::::bbbbbbbbb       ooooooooooo wwwwwww           wwwww           wwwwwwwzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        T:::::T      ee::::::::::::ee    ee::::::::::::ee  b::::::::::::::bb   oo:::::::::::oow:::::w         w:::::w         w:::::w z:::::::::::::::zz:::::::::::::::z
        T:::::T     e::::::eeeee:::::ee e::::::eeeee:::::eeb::::::::::::::::b o:::::::::::::::ow:::::w       w:::::::w       w:::::w  z::::::::::::::z z::::::::::::::z 
        T:::::T    e::::::e     e:::::ee::::::e     e:::::eb:::::bbbbb:::::::bo:::::ooooo:::::o w:::::w     w:::::::::w     w:::::w   zzzzzzzz::::::z  zzzzzzzz::::::z  
        T:::::T    e:::::::eeeee::::::ee:::::::eeeee::::::eb:::::b    b::::::bo::::o     o::::o  w:::::w   w:::::w:::::w   w:::::w          z::::::z         z::::::z   
        T:::::T    e:::::::::::::::::e e:::::::::::::::::e b:::::b     b:::::bo::::o     o::::o   w:::::w w:::::w w:::::w w:::::w          z::::::z         z::::::z    
        T:::::T    e::::::eeeeeeeeeee  e::::::eeeeeeeeeee  b:::::b     b:::::bo::::o     o::::o    w:::::w:::::w   w:::::w:::::w          z::::::z         z::::::z     
        T:::::T    e:::::::e           e:::::::e           b:::::b     b:::::bo::::o     o::::o     w:::::::::w     w:::::::::w          z::::::z         z::::::z      
      TT:::::::TT  e::::::::e          e::::::::e          b:::::bbbbbb::::::bo:::::ooooo:::::o      w:::::::w       w:::::::w          z::::::zzzzzzzz  z::::::zzzzzzzz
      T:::::::::T   e::::::::eeeeeeee   e::::::::eeeeeeee  b::::::::::::::::b o:::::::::::::::o       w:::::w         w:::::w          z::::::::::::::z z::::::::::::::z
      T:::::::::T    ee:::::::::::::e    ee:::::::::::::e  b:::::::::::::::b   oo:::::::::::oo         w:::w           w:::w          z:::::::::::::::zz:::::::::::::::z
      TTTTTTTTTTT      eeeeeeeeeeeeee      eeeeeeeeeeeeee  bbbbbbbbbbbbbbbb      ooooooooooo            www             www           zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
                    
   OO:::::::::OO                     
 OO:::::::::::::OO                   
O:::::::OOO:::::::O                  
O::::::O   O::::::O nnnn  nnnnnnnn    
O:::::O     O:::::O n:::nn::::::::nn
O:::::O     O:::::O n::::::::::::::nn 
O:::::O     O:::::O nn:::::::::::::::n
O:::::O     O:::::O  n:::::nnnn:::::n
O:::::O     O:::::O  n::::n    n::::n
O:::::O     O:::::O  n::::n    n::::n
O::::::O   O::::::O  n::::n    n::::n
O:::::::OOO:::::::O  n::::n    n::::n
 OO:::::::::::::OO   n::::n    n::::n
   OO:::::::::OO     n::::n    n::::n
     OOOOOOOOO       nnnnnn    nnnnnn
     
TTTTTTTTTTTTTTTTTTTTTTT                                  
T:::::::::::::::::::::T                                  
T:::::::::::::::::::::T                                  
T:::::TT:::::::TT:::::T                                  
TTTTTT  T:::::T  TTTTTTooooooooooo    ppppp   ppppppppp   
        T:::::T      oo:::::::::::oo  p::::ppp:::::::::p  
        T:::::T     o:::::::::::::::o p:::::::::::::::::p 
        T:::::T     o:::::ooooo:::::o pp::::::ppppp::::::p
        T:::::T     o::::o     o::::o p:::::p     p:::::p
        T:::::T     o::::o     o::::o p:::::p     p:::::p
        T:::::T     o::::o     o::::o p:::::p     p:::::p
        T:::::T     o::::o     o::::o p:::::p    p::::::p
      TT:::::::TT   o:::::ooooo:::::o p:::::ppppp:::::::p
      T:::::::::T   o:::::::::::::::o p::::::::::::::::p 
      T:::::::::T    oo:::::::::::oo  p::::::::::::::pp  
      TTTTTTTTTTT      ooooooooooo    p::::::pppppppp    
                                      p:::::p            
                                      p:::::p            
                                     p:::::::p           
                                     p:::::::p           
                                     p:::::::p           
                                     ppppppppp

]]
